syntax on
filetype plugin on
filetype plugin indent on


" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden		" Hide buffers when they are abandoned
set mouse=a	" Enable mouse usage (all modes)
set number

" Source a global configuration file if available
"if filereadable("/etc/vim/vimrc.local")
"  source /etc/vim/vimrc.local
"endif

" CUSTOM ADDITIONS
set guifont=IBMPlexMono-Regular:h20
set tabstop=4
set shiftwidth=4
set expandtab
set columns=80
set colorcolumn=80
set ttimeoutlen=50
" access to system clipboard
set clipboard=unnamed
" Enable folding
set cursorline
set foldmethod=indent
set foldlevel=99
nnoremap <space> za
set clipboard=unnamed

" Pathogen Enable
execute pathogen#infect()

" Color Schema
set background=dark
colorscheme gruvbox

" gruvbox opetions
let g:gruvbox_contrast_dark = 'soft'

" IndentLine options
let g:indentLine_color_term = 236
let g:indentLine_char = '‚é∏'

"fugitive related

"Gitgutter related
"let g:gitgutter_signs = 0  "SignsToggle off

" YouCompleteMe Related
set completeopt-=preview
"       remap <tab> for completation
let g:UltiSnipsExpandTrigger="<c-j>"


"Ale related (Vim 8 only)
let b:ale_linters = {'python': ['flake8']}
let b:ale_fixers = {'python': ['remove_trailing_lines', 'trim_whitespace', 'autopep8']}
let g:ale_completion_enabled = 1
map <C-d>f :ALEFix<CR>

"NerdTree
map <C-n> :NERDTreeToggle<CR>

" fzf.vim related
map <F2> :Files<CR>

" lightline.vim relate
set laststatus=2
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'fugitive#head'
      \ },
      \ }

